(()=>{var __webpack_modules__={"./src/js/tagcloud.js":()=>{eval("/*\r\n* 3d标签云\r\n* 功能：鼠标移入标签，当前标签静止放大\r\n* 说明：\r\n* */\r\nwindow.tagcloud = (function (win, doc) { // ns\r\n  // 判断对象\r\n  function isObject(obj) {\r\n    return Object.prototype.toString.call(obj) === '[object Object]'\r\n  }\r\n\r\n  // 构造函数\r\n  function TagCloud(options) {\r\n    var self = this\r\n\r\n    self.config = TagCloud._getConfig(options)\r\n    self.box = self.config.element   //组件元素\r\n    self.fontsize = self.config.fontsize //平均字体大小\r\n    self.radius = self.config.radius //滚动半径\r\n    self.depth = 2 * self.radius   //滚动深度\r\n    self.size = 2 * self.radius    //随鼠标滚动变速作用区域\r\n\r\n    self.mspeed = TagCloud._getMsSpeed(self.config.mspeed)\r\n    self.ispeed = TagCloud._getIsSpeed(self.config.ispeed)\r\n    self.items = self._getItems()\r\n\r\n    self.direction = self.config.direction   //初始滚动方向\r\n    self.keep = self.config.keep //鼠标移出后是否保持之前滚动\r\n\r\n    //初始化\r\n    self.active = false   //是否为激活状态\r\n    self.lasta = 1\r\n    self.lastb = 1\r\n    self.mouseX0 = self.ispeed * Math.sin(self.direction * Math.PI / 180)    //鼠标与滚动圆心x轴初始距离\r\n    self.mouseY0 = -self.ispeed * Math.cos(self.direction * Math.PI / 180)   //鼠标与滚动圆心y轴初始距离\r\n    self.mouseX = self.mouseX0   //鼠标与滚动圆心x轴距离\r\n    self.mouseY = self.mouseY0   //鼠标与滚动圆心y轴距离\r\n    self.index = -1\r\n\r\n    //鼠标移入\r\n    TagCloud._on(self.box, 'mouseover', function () {\r\n      self.active = true\r\n    })\r\n    //鼠标移出\r\n    TagCloud._on(self.box, 'mouseout', function () {\r\n      self.active = false\r\n    })\r\n\r\n    //鼠标在内移动\r\n    TagCloud._on(self.keep ? win : self.box, 'mousemove', function (ev) {\r\n      var oEvent = win.event || ev\r\n      var boxPosition = self.box.getBoundingClientRect()\r\n      self.mouseX = (oEvent.clientX - (boxPosition.left + self.box.offsetWidth / 2)) / 5\r\n      self.mouseY = (oEvent.clientY - (boxPosition.top + self.box.offsetHeight / 2)) / 5\r\n    })\r\n\r\n    for (var j = 0, len = self.items.length; j < len; j++) {\r\n      self.items[j].element.index = j\r\n\r\n      //鼠标移出子元素,当前元素静止放大\r\n      self.items[j].element.onmouseover = function () {\r\n        self.index = this.index\r\n      }\r\n\r\n      //鼠标移出子元素,当前元素继续滚动\r\n      self.items[j].element.onmouseout = function () {\r\n        self.index = -1\r\n      }\r\n    }\r\n\r\n    //定时更新\r\n    TagCloud.boxs.push(self.box)\r\n    self.update(self)    //初始更新\r\n    self.box.style.visibility = 'visible'\r\n    self.box.style.position = 'relative'\r\n    self.box.style.overflow = 'hidden'\r\n    self.box.style.margin = '0'\r\n    self.box.style.padding = '0'\r\n    self.box.style.whiteSpace = 'nowrap'\r\n    self.box.style.minHeight = (1.2 * self.size < 220 ? 220 : 1.2 * self.size) + 'px'\r\n    self.box.style.minWidth = 'auto'\r\n    for (var j2 = 0, len2 = self.items.length; j2 < len2; j2++) {\r\n      self.items[j2].element.style.position = 'absolute'\r\n      self.items[j2].element.style.zIndex = j2 + 1\r\n    }\r\n    self.up = setInterval(function () {\r\n      self.update(self)\r\n    }, 30)\r\n  }\r\n\r\n  //实例\r\n  TagCloud.boxs = [] //实例元素数组\r\n  // 静态方法们\r\n  TagCloud._set = function (element) {\r\n    if (TagCloud.boxs.indexOf(element) === -1) {//ie8不支持数组的indexOf方法\r\n      return true\r\n    }\r\n  }\r\n\r\n  //添加数组IndexOf方法\r\n  if (!Array.prototype.indexOf) {\r\n    Array.prototype.indexOf = function (elt /*, from*/) {\r\n      var len = this.length >>> 0\r\n      var from = Number(arguments[1]) || 0\r\n      from = (from < 0)\r\n        ? Math.ceil(from)\r\n        : Math.floor(from)\r\n      if (from < 0)\r\n        from += len\r\n\r\n      for (; from < len; from++) {\r\n        if (from in this && this[from] === elt)\r\n          return from\r\n      }\r\n      return -1\r\n    }\r\n  }\r\n\r\n\r\n  TagCloud._getConfig = function (config) {\r\n    var defaultConfig = {   //默认值\r\n      fontsize: 16,       //基本字体大小, 单位px\r\n      radius: 60,         //滚动半径, 单位px\r\n      mspeed: 'normal',   //滚动最大速度, 取值: slow, normal(默认), fast\r\n      ispeed: 'normal',   //滚动初速度, 取值: slow, normal(默认), fast\r\n      direction: 135,     //初始滚动方向, 取值角度(顺时针360): 0对应top, 90对应left, 135对应right-bottom(默认)...\r\n      keep: true          //鼠标移出组件后是否继续随鼠标滚动, 取值: false, true(默认) 对应 减速至初速度滚动, 随鼠标滚动\r\n    }\r\n\r\n    if (isObject(config)) {\r\n      for (var i in config) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (Object.prototype.hasOwnProperty.call(config, i)) {//hasOwnProperty()用来判断一个属性是定义在对象本身而不是继承自原型链//config.hasOwnProperty(i)\r\n          defaultConfig[i] = config[i] //用户配置\r\n        }\r\n      }\r\n    }\r\n\r\n    return defaultConfig// 配置 Merge\r\n  }\r\n  TagCloud._getMsSpeed = function (mspeed) {    //滚动最大速度\r\n    var speedMap = {\r\n      slow: 1.5,\r\n      normal: 3,\r\n      fast: 5\r\n    }\r\n    return speedMap[mspeed] || 3\r\n  }\r\n  TagCloud._getIsSpeed = function (ispeed) {    //滚动初速度\r\n    var speedMap = {\r\n      slow: 10,\r\n      normal: 25,\r\n      fast: 50\r\n    }\r\n    return speedMap[ispeed] || 25\r\n  }\r\n  TagCloud._getSc = function (a, b) {\r\n    var l = Math.PI / 180\r\n    //数组顺序0,1,2,3表示asin,acos,bsin,bcos\r\n    return [\r\n      Math.sin(a * l),\r\n      Math.cos(a * l),\r\n      Math.sin(b * l),\r\n      Math.cos(b * l)\r\n    ]\r\n  }\r\n\r\n  TagCloud._on = function (ele, eve, handler, cap) {\r\n    if (ele.addEventListener) {\r\n      ele.addEventListener(eve, handler, cap)\r\n    } else if (ele.attachEvent) {\r\n      ele.attachEvent('on' + eve, handler)\r\n    } else {\r\n      ele['on' + eve] = handler\r\n    }\r\n  }\r\n\r\n  // 原型方法\r\n  TagCloud.prototype = {\r\n    constructor: TagCloud, // 反向引用构造器\r\n\r\n    update: function () {\r\n      var self = this, a, b\r\n\r\n      if (!self.active && !self.keep) {\r\n        self.mouseX = Math.abs(self.mouseX - self.mouseX0) < 1 ? self.mouseX0 : (self.mouseX + self.mouseX0) / 2   //重置鼠标与滚动圆心x轴距离\r\n        self.mouseY = Math.abs(self.mouseY - self.mouseY0) < 1 ? self.mouseY0 : (self.mouseY + self.mouseY0) / 2   //重置鼠标与滚动圆心y轴距离\r\n      }\r\n\r\n      a = -(Math.min(Math.max(-self.mouseY, -self.size), self.size) / self.radius) * self.mspeed\r\n      b = (Math.min(Math.max(-self.mouseX, -self.size), self.size) / self.radius) * self.mspeed\r\n\r\n      if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01) {\r\n        return\r\n      }\r\n\r\n      self.lasta = a\r\n      self.lastb = b\r\n\r\n      var sc = TagCloud._getSc(a, b)\r\n\r\n      for (var j = 0, len = self.items.length; j < len; j++) {\r\n\r\n        var rx1 = self.items[j].x,\r\n          ry1 = self.items[j].y * sc[1] + self.items[j].z * (-sc[0]),\r\n          rz1 = self.items[j].y * sc[0] + self.items[j].z * sc[1]\r\n\r\n        var rx2 = rx1 * sc[3] + rz1 * sc[2],\r\n          rz2 = rz1 * sc[3] - rx1 * sc[2]\r\n\r\n        if (self.index === j) {\r\n\r\n          self.items[j].scale = 1 //取值范围0.6 ~ 3\r\n          self.items[j].fontsize = 16\r\n          self.items[j].alpha = 1\r\n          self.items[j].element.style.zIndex = 99\r\n        } else {\r\n          var per = self.depth / (self.depth + rz2)\r\n          self.items[j].x = rx2\r\n          self.items[j].y = ry1\r\n          self.items[j].z = rz2\r\n\r\n          self.items[j].scale = per //取值范围0.6 ~ 3\r\n          self.items[j].fontsize = Math.ceil(per * 2) + self.fontsize - 6\r\n          self.items[j].alpha = 1.5 * per - 0.5\r\n          self.items[j].element.style.zIndex = Math.ceil(per * 10 - 5)\r\n        }\r\n        self.items[j].element.style.fontSize = self.items[j].fontsize + 'px'\r\n        self.items[j].element.style.left = self.items[j].x + (self.box.offsetWidth - self.items[j].offsetWidth / 2) / 2 + 'px'\r\n        self.items[j].element.style.top = self.items[j].y + (self.box.offsetHeight - self.items[j].offsetHeight) / 2 + 'px'\r\n        self.items[j].element.style.filter = 'alpha(opacity=' + 100 * self.items[j].alpha + ')'\r\n        self.items[j].element.style.opacity = self.items[j].alpha\r\n      }\r\n    },\r\n\r\n    _getItems: function () {\r\n      var self = this,\r\n        items = [],\r\n        element = self.box.children, // children 全部是Element\r\n        length = element.length,\r\n        item\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        item = {}\r\n        item.angle = {}\r\n        item.angle.phi = Math.acos(-1 + (2 * i + 1) / length)\r\n        item.angle.theta = Math.sqrt((length + 1) * Math.PI) * item.angle.phi\r\n        item.element = element[i]\r\n        item.offsetWidth = item.element.offsetWidth\r\n        item.offsetHeight = item.element.offsetHeight\r\n        item.x = self.radius * 1.5 * Math.cos(item.angle.theta) * Math.sin(item.angle.phi)\r\n        item.y = self.radius * 1.5 * Math.sin(item.angle.theta) * Math.sin(item.angle.phi)\r\n        item.z = self.radius * 1.5 * Math.cos(item.angle.phi)\r\n        item.element.style.left = item.x + (self.box.offsetWidth - item.offsetWidth / 2) / 2 + 'px'\r\n        item.element.style.top = item.y + (self.box.offsetHeight - item.offsetHeight) / 2 + 'px'\r\n        items.push(item)\r\n      }\r\n\r\n      return items   //单元素数组\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (!doc.querySelectorAll) {//ie7不支持querySelectorAll，所以要重新定义\r\n    doc.querySelectorAll = function (selectors) {\r\n      var style = doc.createElement('style'), elements = [], element\r\n      doc.documentElement.firstChild.appendChild(style)\r\n      doc._qsa = []\r\n\r\n      style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}'\r\n      window.scrollBy(0, 0)\r\n      style.parentNode.removeChild(style)\r\n\r\n      while (doc._qsa.length) {\r\n        element = doc._qsa.shift()\r\n        element.style.removeAttribute('x-qsa')\r\n        elements.push(element)\r\n      }\r\n      doc._qsa = null\r\n      return elements\r\n    }\r\n  }\r\n\r\n  return function (options) { // factory\r\n    options = options || {} // 短路语法\r\n    var selector = options.selector || '.tagcloud', //默认选择class为tagcloud的元素\r\n      elements = doc.querySelectorAll(selector),\r\n      instance = []\r\n    for (var index = 0, len = elements.length; index < len; index++) {\r\n      options.element = elements[index]\r\n      if (TagCloud._set(options.element)) {\r\n        instance.push(new TagCloud(options))\r\n      }\r\n    }\r\n    return instance\r\n  }\r\n\r\n})(window, document)\n\n//# sourceURL=webpack://halo-theme-dream2.0-plus/./src/js/tagcloud.js?")}},__webpack_exports__={};__webpack_modules__["./src/js/tagcloud.js"]()})();