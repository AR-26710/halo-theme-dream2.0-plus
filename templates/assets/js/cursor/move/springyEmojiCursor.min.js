(()=>{var __webpack_modules__={"./src/js/cursor/move/springyEmojiCursor.js":()=>{eval("// The springy emoji effect has been translated over from this old\r\n// code, to modern js & canvas\r\n// - http://www.yaldex.com/FSMessages/ElasticBullets.htm\r\nfunction springyEmojiCursor(options) {\r\n  let emoji = (options && options.emoji) || 'ðŸ¤ª'\r\n  let hasWrapperEl = options && options.element\r\n  let element = hasWrapperEl || document.body\r\n\r\n  let nDots = 7\r\n  let DELTAT = 0.01\r\n  let SEGLEN = 10\r\n  let SPRINGK = 10\r\n  let MASS = 1\r\n  let GRAVITY = 50\r\n  let RESISTANCE = 10\r\n  let STOPVEL = 0.1\r\n  let STOPACC = 0.1\r\n  let DOTSIZE = 11\r\n  let BOUNCE = 0.7\r\n\r\n  let width = window.innerWidth\r\n  let height = window.innerHeight\r\n  let cursor = { x: width / 2, y: width / 2 }\r\n  let particles = []\r\n  let canvas, context\r\n\r\n  let emojiAsImage\r\n\r\n  function init() {\r\n    canvas = document.createElement('canvas')\r\n    context = canvas.getContext('2d')\r\n    canvas.style.top = '0px'\r\n    canvas.style.left = '0px'\r\n    canvas.style.pointerEvents = 'none'\r\n\r\n    if (hasWrapperEl) {\r\n      canvas.style.position = 'absolute'\r\n      element.appendChild(canvas)\r\n      canvas.width = element.clientWidth\r\n      canvas.height = element.clientHeight\r\n    } else {\r\n      canvas.style.position = 'fixed'\r\n      document.body.appendChild(canvas)\r\n      canvas.width = width\r\n      canvas.height = height\r\n    }\r\n\r\n    // Save emoji as an image for performance\r\n    context.font = '16px serif'\r\n    context.textBaseline = 'middle'\r\n    context.textAlign = 'center'\r\n\r\n    let measurements = context.measureText(emoji)\r\n    let bgCanvas = document.createElement('canvas')\r\n    let bgContext = bgCanvas.getContext('2d')\r\n\r\n    bgCanvas.width = measurements.width\r\n    bgCanvas.height = measurements.actualBoundingBoxAscent * 2\r\n\r\n    bgContext.textAlign = 'center'\r\n    bgContext.font = '16px serif'\r\n    bgContext.textBaseline = 'middle'\r\n    bgContext.fillText(\r\n      emoji,\r\n      bgCanvas.width / 2,\r\n      measurements.actualBoundingBoxAscent\r\n    )\r\n\r\n    emojiAsImage = bgCanvas\r\n\r\n    let i = 0\r\n    for (i = 0; i < nDots; i++) {\r\n      particles[i] = new Particle(emojiAsImage)\r\n    }\r\n\r\n    bindEvents()\r\n    loop()\r\n  }\r\n\r\n  // Bind events that are needed\r\n  function bindEvents() {\r\n    element.addEventListener('mousemove', onMouseMove)\r\n    element.addEventListener('touchmove', onTouchMove, { passive: true })\r\n    element.addEventListener('touchstart', onTouchMove, { passive: true })\r\n    window.addEventListener('resize', onWindowResize)\r\n  }\r\n\r\n  function onWindowResize(e) {\r\n    width = window.innerWidth\r\n    height = window.innerHeight\r\n\r\n    if (hasWrapperEl) {\r\n      canvas.width = element.clientWidth\r\n      canvas.height = element.clientHeight\r\n    } else {\r\n      canvas.width = width\r\n      canvas.height = height\r\n    }\r\n  }\r\n\r\n  function onTouchMove(e) {\r\n    if (e.touches.length > 0) {\r\n      if (hasWrapperEl) {\r\n        const boundingRect = element.getBoundingClientRect()\r\n        cursor.x = e.touches[0].clientX - boundingRect.left\r\n        cursor.y = e.touches[0].clientY - boundingRect.top\r\n      } else {\r\n        cursor.x = e.touches[0].clientX\r\n        cursor.y = e.touches[0].clientY\r\n      }\r\n    }\r\n  }\r\n\r\n  function onMouseMove(e) {\r\n    if (hasWrapperEl) {\r\n      const boundingRect = element.getBoundingClientRect()\r\n      cursor.x = e.clientX - boundingRect.left\r\n      cursor.y = e.clientY - boundingRect.top\r\n    } else {\r\n      cursor.x = e.clientX\r\n      cursor.y = e.clientY\r\n    }\r\n  }\r\n\r\n  function updateParticles() {\r\n    // eslint-disable-next-line no-self-assign\r\n    canvas.width = canvas.width\r\n\r\n    // follow mouse\r\n    particles[0].position.x = cursor.x\r\n    particles[0].position.y = cursor.y\r\n\r\n    // Start from 2nd dot\r\n    for (i = 1; i < nDots; i++) {\r\n      let spring = new vec(0, 0)\r\n\r\n      if (i > 0) {\r\n        springForce(i - 1, i, spring)\r\n      }\r\n\r\n      if (i < nDots - 1) {\r\n        springForce(i + 1, i, spring)\r\n      }\r\n\r\n      let resist = new vec(\r\n        -particles[i].velocity.x * RESISTANCE,\r\n        -particles[i].velocity.y * RESISTANCE\r\n      )\r\n\r\n      let accel = new vec(\r\n        (spring.X + resist.X) / MASS,\r\n        (spring.Y + resist.Y) / MASS + GRAVITY\r\n      )\r\n\r\n      particles[i].velocity.x += DELTAT * accel.X\r\n      particles[i].velocity.y += DELTAT * accel.Y\r\n\r\n      if (\r\n        Math.abs(particles[i].velocity.x) < STOPVEL &&\r\n        Math.abs(particles[i].velocity.y) < STOPVEL &&\r\n        Math.abs(accel.X) < STOPACC &&\r\n        Math.abs(accel.Y) < STOPACC\r\n      ) {\r\n        particles[i].velocity.x = 0\r\n        particles[i].velocity.y = 0\r\n      }\r\n\r\n      particles[i].position.x += particles[i].velocity.x\r\n      particles[i].position.y += particles[i].velocity.y\r\n\r\n      let height, width\r\n      height = canvas.clientHeight\r\n      width = canvas.clientWidth\r\n\r\n      if (particles[i].position.y >= height - DOTSIZE - 1) {\r\n        if (particles[i].velocity.y > 0) {\r\n          particles[i].velocity.y = BOUNCE * -particles[i].velocity.y\r\n        }\r\n        particles[i].position.y = height - DOTSIZE - 1\r\n      }\r\n\r\n      if (particles[i].position.x >= width - DOTSIZE) {\r\n        if (particles[i].velocity.x > 0) {\r\n          particles[i].velocity.x = BOUNCE * -particles[i].velocity.x\r\n        }\r\n        particles[i].position.x = width - DOTSIZE - 1\r\n      }\r\n\r\n      if (particles[i].position.x < 0) {\r\n        if (particles[i].velocity.x < 0) {\r\n          particles[i].velocity.x = BOUNCE * -particles[i].velocity.x\r\n        }\r\n        particles[i].position.x = 0\r\n      }\r\n\r\n      particles[i].draw(context)\r\n    }\r\n  }\r\n\r\n  function loop() {\r\n    updateParticles()\r\n    requestAnimationFrame(loop)\r\n  }\r\n\r\n  function vec(X, Y) {\r\n    this.X = X\r\n    this.Y = Y\r\n  }\r\n\r\n  function springForce(i, j, spring) {\r\n    let dx = particles[i].position.x - particles[j].position.x\r\n    let dy = particles[i].position.y - particles[j].position.y\r\n    let len = Math.sqrt(dx * dx + dy * dy)\r\n    if (len > SEGLEN) {\r\n      let springF = SPRINGK * (len - SEGLEN)\r\n      spring.X += (dx / len) * springF\r\n      spring.Y += (dy / len) * springF\r\n    }\r\n  }\r\n\r\n  function Particle(canvasItem) {\r\n    this.position = { x: cursor.x, y: cursor.y }\r\n    this.velocity = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.canv = canvasItem\r\n\r\n    this.draw = function(context) {\r\n      context.drawImage(\r\n        this.canv,\r\n        this.position.x - this.canv.width / 2,\r\n        this.position.y - this.canv.height / 2,\r\n        this.canv.width,\r\n        this.canv.height\r\n      )\r\n    }\r\n  }\r\n\r\n  init()\r\n}\r\nnew springyEmojiCursor()\n\n//# sourceURL=webpack://halo-theme-dream2.0-plus/./src/js/cursor/move/springyEmojiCursor.js?")}},__webpack_exports__={};__webpack_modules__["./src/js/cursor/move/springyEmojiCursor.js"]()})();